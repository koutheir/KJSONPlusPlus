
#include "json.h"

/*!re2c
	DIGITS				= [0-9]+ ;
	SIGN				= [\+\-]? ;
	EXPONENT			= [Ee] ;
	INTEGER				= SIGN DIGITS ;
	FLOATING			= INTEGER "." DIGITS * ( EXPONENT INTEGER )? ;
	SPACE				= [ \t\r]+ ;
	NEW_LINE			= "\n" ;
	STRING_DELIMITER	= "\"" ;
	STRING_CHAR			= "\\\"" | [^\"] ;
	NULL				= "null" ;
	FALSE				= "false" ;
	TRUE				= "true" ;
	YEAR				= INTEGER ;
	MONTH				= ( "0" ? [1-9] ) | ( "1" [0-2] ) ;
	DAY					= ( "0" ? [1-9] ) | ( [1-2] [0-9] ) | ( "3" [0-1] ) ;
	HOUR				= [0-9] | ( [0-1] [0-9] ) | ( "2" [0-3] ) ;
	MINUTE				= [0-9] | ( [0-5] [0-9] ) ;
	SECOND				= [0-9] | ( [0-5] [0-9] ) ;
	SECOND_FRACTION		= [0-9] | ( [0-9] [0-9] ) ;
	ISO8601_SUFFIX		= [Zz] ;
	ISO8601_TIME_PREFIX	= [Tt] ;
	ISO8601_TIME_FORMAT	= HOUR ( ":" MINUTE ( ":" SECOND ( "." SECOND_FRACTION )? )? )? ;
	ISO8601_DATE_FORMAT = YEAR ( "-" MONTH ( "-" DAY )? )? ;
	TIME_ISO8601		= ISO8601_TIME_PREFIX ISO8601_TIME_FORMAT ISO8601_SUFFIX ;
	DATE_ISO8601		= ISO8601_DATE_FORMAT ( ISO8601_TIME_PREFIX ISO8601_TIME_FORMAT )? ISO8601_SUFFIX ;
	STRING_DATE			= STRING_DELIMITER ( DATE_ISO8601 | TIME_ISO8601 ) STRING_DELIMITER ;
	STRING				= STRING_DELIMITER ( STRING_CHAR )* STRING_DELIMITER ;
*/

int JSON::Scanner::ScanNextLexem()
{
	YYCTYPE at_cursor;

	for (;;) {
		m_current_state->location.column += (YYCURSOR - YYTOKEN);
		YYTOKEN = YYCURSOR;
		
		/*!re2c

		NEW_LINE
		{
			m_current_state->location.NewLine();
			continue;	// Skip new line
		}
		
		SPACE
		{
			continue;	// Skip white space
		}

		FLOATING
		{
			at_cursor = *YYCURSOR;
			*YYCURSOR = '\0';
			yylval.number_double = strtod(YYTOKEN, NULL);
			*YYCURSOR = at_cursor;
			return json_double_number;
		}

		INTEGER
		{
			at_cursor = *YYCURSOR;
			*YYCURSOR = '\0';
			yylval.number_int = strtoll(YYTOKEN, NULL, 10);
			*YYCURSOR = at_cursor;
			return json_integer_number;
		}

		STRING_DATE
		{
			at_cursor = *YYCURSOR;
			*YYCURSOR = '\0';
			json_unescape_string(&yylval.string.data, &yylval.string.length, YYTOKEN + 1, yyleng - 2);
			*YYCURSOR = at_cursor;
			return json_datetime;
		}

		STRING
		{
			at_cursor = *YYCURSOR;
			*YYCURSOR = '\0';
			json_unescape_string(&yylval.string.data, &yylval.string.length, YYTOKEN + 1, yyleng - 2);
			*YYCURSOR = at_cursor;
			return json_string;
		}

		NULL
		{
			return json_null;
		}
		FALSE
		{
			return json_false;
		}
		
		TRUE
		{			
			return json_true;
		}
		
		.
		{
			return *YYTOKEN;
		}

		*/
	}
}
